#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <assert.h>
#include <time.h>
#include <sys/time.h>

EXEC SQL INCLUDE SQLCA;

#define SQL_NOTFOUND    (17045)


int Connect( char* aConnStr, char* aUid, char* aPwd );
int DisConnect();
int ReConnect();
int doMain();

void doSqlError();
void doNotFound();

/* WHENEVER setting */
EXEC SQL WHENEVER SQLERROR DO doSqlError();
//EXEC SQL WHENEVER SQLERROR GOTO _ERR;
//EXEC SQL WHENEVER NOT FOUND DO doNotFound();
EXEC SQL WHENEVER SQLSTATE 08S01 DO ReConnect();

int g_usleep = 100;
int LOOP = 1000000;

long long g_session_id;
long long g_serial_no;

int main(int argc, char **argv)
{
    if ( argc > 1 )
    {
        g_usleep = atoi( argv[1] );
    }

    if ( argc > 2 )
    {
        LOOP = atoi( argv[2] );
    }

    (void) Connect("DSN=GOLDILOCKS", "test", "test") ;

    (void) doMain();
    
    EXEC SQL ROLLBACK WORK RELEASE;
    return 0;
}

int doMain()
{
    EXEC SQL BEGIN DECLARE SECTION;
    char vTm [26+1] ;
    long long v_session_id;
    long long v_serial_no;
    EXEC SQL END DECLARE SECTION;

    long long dTime;
    struct timeval sStart;
    struct timeval sEnd; 

    int sLoop = 0 ;
    EXEC SQL DECLARE C1 CURSOR FOR 
    SELECT to_char(systimestamp, 'yyyy/mm/dd hh24:mi:ss.ff6') as tm 
         , session_id()
         , session_serial()
    FROM   DUAL ;


    dTime = 0;
    gettimeofday ( &sStart, NULL ) ;
    while  ( 1 ) 
    { 
        EXEC SQL OPEN C1 ;

        EXEC SQL FETCH C1 INTO :vTm, :v_session_id, :v_serial_no;
        if (sqlca.sqlcode == SQL_NOTFOUND) break; 

        if ( sLoop % 10000 == 0 ) 
        {
            // ERR-42000(16210): lacks privilege (ALTER SYSTEM ON DATABASE)
            //EXEC SQL ALTER SYSTEM DISCONNECT SESSION :v_session_id , :v_serial_no ;

            printf ( ">> [%s] FETCH OK!!, if need, gSQL> ALTER SYSTEM DISCONNECT SESSION %lld, %lld; \n", vTm, v_session_id, v_serial_no );
        }

        EXEC SQL CLOSE C1; 

        //EXEC SQL COMMIT ;
        sLoop ++ ;
        if ( sLoop == LOOP ) break; 
        if ( g_usleep > 0 ) usleep ( g_usleep ) ;
    }
    gettimeofday ( &sEnd , NULL ) ; 
    dTime += (sEnd.tv_sec - sStart.tv_sec ) * 1000000 + (sEnd.tv_usec - sStart.tv_usec ) ; 

    printf ( ">> (pid=%d) %lld us Elapsed : %lf us per cycle  \n", getpid(), dTime, (double)(dTime/LOOP)  ) ;
    return 0;
}

/*
 * WHENEVER를 사용하지 않는 함수들 위치
 */

EXEC SQL WHENEVER SQLERROR CONTINUE;
EXEC SQL WHENEVER NOT FOUND CONTINUE;
EXEC SQL WHENEVER SQLSTATE 08S01 CONTINUE;

int Connect( char* aConnStr, char* aUid, char* aPwd )
{
    EXEC SQL BEGIN DECLARE SECTION;
    char  *sUid;
    char  *sPwd;
    char  *sConnStr;
    EXEC SQL END DECLARE SECTION;

    static int cnt = 0;

    sUid = aUid ;
    sPwd = aPwd ;
    sConnStr = aConnStr ;
    EXEC SQL CONNECT :sUid IDENTIFIED BY :sPwd USING :sConnStr;
    if(sqlca.sqlcode != 0)
    {
        printf("(E) ERR-%d(%s) %s\n", sqlca.sqlcode, SQLSTATE, sqlca.sqlerrm.sqlerrmc ); fflush(stdout);
        exit(1);
    }
    else
    {
        cnt ++ ;
        printf(">> [%4d] (pid=%d) Connect OK!\n", cnt, getpid() );
    }

    return 0;
}

int DisConnect( )
{
    // [TODO] ROLLBACK 에서 오류발생으로 DISCONNECT 호출하지 못하는 경우 발생함. 
    //EXEC SQL ROLLBACK WORK RELEASE;

    EXEC SQL ROLLBACK ;
    if(sqlca.sqlcode != 0)
    {
        printf("(E) [ROLLBACK] ERR-%d(%s) %s\n", sqlca.sqlcode, SQLSTATE, sqlca.sqlerrm.sqlerrmc ); fflush(stdout);
    }

    // [필수] ERR--23032(08002) duplicate connection context
    EXEC SQL DISCONNECT ;
    if(sqlca.sqlcode != 0)
    {
        printf("(E) [DISCONNECT] ERR-%d(%s) %s\n", sqlca.sqlcode, SQLSTATE, sqlca.sqlerrm.sqlerrmc ); fflush(stdout);
    }

    return 0;
}

int ReConnect( )
{
    printf(">> (pid=%d) Start !! - ReConnect (rc=%d, err=%d)\n", getpid(), sqlca.sqlcode, errno );

    (void) DisConnect();
    (void) Connect("DSN=GOLDILOCKS", "test", "test") ;

    // 업무 재구동 필요!!
    (void) doMain();

    return 0;
}

void doSqlError()
{
    printf("(E) ERR-%d(%s) %s\n", sqlca.sqlcode, SQLSTATE, sqlca.sqlerrm.sqlerrmc ); fflush(stdout);

    EXEC SQL ROLLBACK WORK RELEASE;
    exit(1);
    //assert( "!! DB ERR!!" && 0 ) ;
}

void doNotFound()
{
    printf("(I) ERR-%d(%s) %s\n", sqlca.sqlcode, SQLSTATE, sqlca.sqlerrm.sqlerrmc ); fflush(stdout);
}
