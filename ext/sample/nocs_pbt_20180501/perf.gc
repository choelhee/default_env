#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <assert.h>
#include <time.h>
#include <sys/time.h>

EXEC SQL INCLUDE SQLCA;

#define SUCCESS         0
#define FAILURE         -1

#define SQL_NOTFOUND    (17045)


int Connect( char* aConnStr, char* aUid, char* aPwd );
void doSqlError();
void doNotFound();

/* WHENEVER setting */
EXEC SQL WHENEVER SQLERROR DO doSqlError();
//EXEC SQL WHENEVER SQLERROR GOTO _ERR;
//EXEC SQL WHENEVER NOT FOUND DO doNotFound();

int g_usleep = 100;
int LOOP = 1000000;

int main(int argc, char **argv)
{
    EXEC SQL BEGIN DECLARE SECTION;
    char strDbUsgStrtDtm [ 9 ]; 
    char strDbUseTrgtNo  [ 5 ]; 
    char strDbSvcMgmtNo [ 8 ]; 

    char a [11] ;
    char b [15] ;
    char c [15] ;
    char d [15] ; 
    char e [11] ;
    char f [11] ;

    long long dTime;
    struct timeval sStart;
    struct timeval sEnd; 
  
    EXEC SQL END DECLARE SECTION;

    if ( argc > 1 )
    {
        g_usleep = atoi( argv[1] );
    }

    if ( argc > 2 )
    {
        LOOP = atoi( argv[2] );
    }

    //(void) Connect("DSN=GOLDILOCKS", "test", "test") ;
    (void) Connect("DSN=GOLDILOCKS", "ornocs", "ornocs") ;
    
    strcpy ( strDbUsgStrtDtm , "20180501");
    strcpy ( strDbUseTrgtNo , "0501");
    strcpy ( strDbSvcMgmtNo , "mgmt_no");
    int sLoop = 0 ;

    EXEC SQL DECLARE C1 CURSOR FOR  
        SELECT  P.PROD_ID,
                P.PROD_OFFER_TYP,
                P.RECURRING_CHRG,
                P.EFF_DT,
                P.PROD_SEQ_NO,
                NVL(C.CORR_ID, ' ')
        FROM    (
                    SELECT  /*+ ORDERING(B,A) USE_NL(B,A) INDEX(B,TOC_PROD_PK) */
                            A.PROD_ID,
                            A.PROD_OFFER_TYP,
                            A.RECURRING_CHRG,
                            B.EFF_DT,
                            B.PROD_SEQ_NO
                    FROM    TOP_PROD A,
                            TOC_PROD B
                    WHERE   B.SVC_MGMT_NO = :strDbSvcMgmtNo
                    AND     B.EFF_DT <= :strDbUsgStrtDtm
                    AND     B.EXP_DT > :strDbUsgStrtDtm
                    AND     A.PROD_ID = B.PROD_ID
                    AND     A.EFF_DT <= :strDbUsgStrtDtm
                    AND     A.EXP_DT > :strDbUsgStrtDtm
                ) P,
                (
                    SELECT  PROD_ID,
                            MAX(CORR_ID) CORR_ID
                    FROM    (
                                SELECT  /*+ INDEX(A,TOC_CORR_PK) */
                                        PROD_ID,
                                        CORR_ID
                                FROM    TOC_CORR A
                                WHERE   SVC_MGMT_NO = :strDbSvcMgmtNo
                                AND     CORR_TYP = 'DT'
                                AND     EFF_DT <= :strDbUsgStrtDtm
                                AND     EXP_DT > :strDbUsgStrtDtm
                                AND     CORR = SUBSTR(:strDbUsgStrtDtm, 5, 4)
                                UNION ALL
                                SELECT  /*+ INDEX(A,TOC_CORR_PK) */
                                        PROD_ID,
                                        CORR_ID
                                FROM    TOC_CORR A
                                WHERE   SVC_MGMT_NO = :strDbSvcMgmtNo
                                AND     CORR_TYP = 'PN'
                                AND     EFF_DT <= :strDbUsgStrtDtm
                                AND     EXP_DT > :strDbUsgStrtDtm
                                AND     CORR = :strDbUseTrgtNo
                            )
                    GROUP BY
                            PROD_ID
                ) C
        WHERE   P.PROD_ID = C.PROD_ID(+)
        ORDER BY
                P.PROD_OFFER_TYP,
                P.EFF_DT,
                P.PROD_SEQ_NO;


    dTime = 0;
    gettimeofday ( &sStart, NULL ) ;
    while  ( 1 ) 
    { 
        //gettimeofday ( &sStart, NULL ) ;
        EXEC SQL OPEN C1 ;
        //gettimeofday ( &sEnd , NULL ) ; 
        //dTime += (sEnd.tv_sec - sStart.tv_sec ) * 1000000 + (sEnd.tv_usec - sStart.tv_usec ) ; 

        EXEC SQL FETCH C1 INTO :a, :b, :c, :d, :e, :f;
        if (sqlca.sqlcode == SQL_NOTFOUND) break; 

        EXEC SQL CLOSE C1; 

        //EXEC SQL COMMIT ;
        sLoop ++ ;

        if ( sLoop == LOOP ) break; 
        if ( g_usleep > 0 ) usleep ( g_usleep ) ;
    }
    gettimeofday ( &sEnd , NULL ) ; 
    dTime += (sEnd.tv_sec - sStart.tv_sec ) * 1000000 + (sEnd.tv_usec - sStart.tv_usec ) ; 

    printf ( ">> (pid=%d) %lld us Elapsed : %lf us per cycle  \n", getpid(), dTime, (double)(dTime/LOOP)  ) ;

    EXEC SQL ROLLBACK WORK RELEASE;
    return 0;
}

/*
 * WHENEVER를 사용하지 않는 함수들 위치
 */

EXEC SQL WHENEVER SQLERROR CONTINUE;
EXEC SQL WHENEVER NOT FOUND CONTINUE;

int Connect( char* aConnStr, char* aUid, char* aPwd )
{
    EXEC SQL BEGIN DECLARE SECTION;
    char  *sUid;
    char  *sPwd;
    char  *sConnStr;
    EXEC SQL END DECLARE SECTION;

    sUid = aUid ;
    sPwd = aPwd ;
    sConnStr = aConnStr ;
    EXEC SQL CONNECT :sUid IDENTIFIED BY :sPwd USING :sConnStr;
    if(sqlca.sqlcode != 0)
    {
        printf(">> (pid=%d) [ERR] Connect Fail ! (rc=%d, err=%d)\n", getpid(), sqlca.sqlcode, errno );
        exit(1);
    }
    else
    {
        printf(">> (pid=%d) Connect OK!\n", getpid() );
    }

    return SUCCESS;
}

void doSqlError()
{
    printf("(E) ERR-%d(%s) %s\n", sqlca.sqlcode, SQLSTATE, sqlca.sqlerrm.sqlerrmc ); fflush(stdout);

    EXEC SQL ROLLBACK WORK RELEASE;
    exit(1);
    //assert( "!! DB ERR!!" && 0 ) ;
}

void doNotFound()
{
    printf("(I) ERR-%d(%s) %s\n", sqlca.sqlcode, SQLSTATE, sqlca.sqlerrm.sqlerrmc ); fflush(stdout);
}
